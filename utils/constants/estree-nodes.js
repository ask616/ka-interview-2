/**
 * Enum data mapping to all ESTree node types and their display strings
 * @type {Object}
 */
module.exports = {
  ids: {
    AssignmentExpression: 'AssignmentExpression',
    AssignmentPattern: 'AssignmentPattern',
    ArrayExpression: 'ArrayExpression',
    ArrayPattern: 'ArrayPattern',
    ArrowFunctionExpression: 'ArrowFunctionExpression',
    BlockStatement: 'BlockStatement',
    BinaryExpression: 'BinaryExpression',
    BreakStatement: 'BreakStatement',
    CallExpression: 'CallExpression',
    CatchClause: 'CatchClause',
    ClassBody: 'ClassBody',
    ClassDeclaration: 'ClassDeclaration',
    ClassExpression: 'ClassExpression',
    ConditionalExpression: 'ConditionalExpression',
    ContinueStatement: 'ContinueStatement',
    DebuggerStatement: 'DebuggerStatement',
    DirectiveStatement: 'DirectiveStatement',
    DoWhileStatement: 'DoWhileStatement',
    EmptyStatement: 'EmptyStatement',
    ExportAllDeclaration: 'ExportAllDeclaration',
    ExportDefaultDeclaration: 'ExportDefaultDeclaration',
    ExportNamedDeclaration: 'ExportNamedDeclaration',
    ExportSpecifier: 'ExportSpecifier',
    ExpressionStatement: 'ExpressionStatement',
    ForStatement: 'ForStatement',
    ForInStatement: 'ForInStatement',
    ForOfStatement: 'ForOfStatement',
    FunctionDeclaration: 'FunctionDeclaration',
    FunctionExpression: 'FunctionExpression',
    Identifier: 'Identifier',
    IfStatement: 'IfStatement',
    ImportDeclaration: 'ImportDeclaration',
    ImportDefaultSpecifier: 'ImportDefaultSpecifier',
    ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
    ImportSpecifier: 'ImportSpecifier',
    Literal: 'Literal',
    LabeledStatement: 'LabeledStatement',
    LogicalExpression: 'LogicalExpression',
    MemberExpression: 'MemberExpression',
    MetaProperty: 'MetaProperty',
    MethodDefinition: 'MethodDefinition',
    ModuleSpecifier: 'ModuleSpecifier',
    NewExpression: 'NewExpression',
    ObjectExpression: 'ObjectExpression',
    ObjectPattern: 'ObjectPattern',
    Program: 'Program',
    Property: 'Property',
    RestElement: 'RestElement',
    ReturnStatement: 'ReturnStatement',
    SequenceExpression: 'SequenceExpression',
    SpreadElement: 'SpreadElement',
    Super: 'Super',
    SwitchStatement: 'SwitchStatement',
    SwitchCase: 'SwitchCase',
    TaggedTemplateExpression: 'TaggedTemplateExpression',
    TemplateElement: 'TemplateElement',
    TemplateLiteral: 'TemplateLiteral',
    ThisExpression: 'ThisExpression',
    ThrowStatement: 'ThrowStatement',
    TryStatement: 'TryStatement',
    UnaryExpression: 'UnaryExpression',
    UpdateExpression: 'UpdateExpression',
    VariableDeclaration: 'VariableDeclaration',
    VariableDeclarator: 'VariableDeclarator',
    WhileStatement: 'WhileStatement',
    WithStatement: 'WithStatement',
    YieldExpression: 'YieldExpression',
  },

  display: {
    AssignmentExpression: 'Assignment expression',
    AssignmentPattern: 'Assignment pattern',
    ArrayExpression: 'Array expression',
    ArrayPattern: 'Array pattern',
    ArrowFunctionExpression: 'Arrow function',
    BlockStatement: 'Block statement',
    BinaryExpression: 'Binary expression',
    BreakStatement: 'Break statement',
    CallExpression: 'Call expression',
    CatchClause: 'Catch clause',
    ClassBody: 'Class body',
    ClassDeclaration: 'Class declaration',
    ClassExpression: 'Class expression',
    ConditionalExpression: 'Conditional expression',
    ContinueStatement: 'Continue statement',
    DebuggerStatement: 'Debugger statement',
    DirectiveStatement: 'Directive statement',
    DoWhileStatement: 'Do...while loop',
    EmptyStatement: 'Empty statement',
    ExportAllDeclaration: 'Export all declaration',
    ExportDefaultDeclaration: 'Export default declaration',
    ExportNamedDeclaration: 'Export named declaration',
    ExportSpecifier: 'Export specifier',
    ExpressionStatement: 'Expression statement',
    ForStatement: 'For loop',
    ForInStatement: 'For...in loop',
    ForOfStatement: 'For...of loop',
    FunctionDeclaration: 'Function declaration',
    FunctionExpression: 'Function expression',
    Identifier: 'Identifier',
    IfStatement: 'If statement',
    ImportDeclaration: 'Import declaration',
    ImportDefaultSpecifier: 'Import default specifier',
    ImportNamespaceSpecifier: 'Import namespace specifier',
    ImportSpecifier: 'Import specifier',
    Literal: 'Literal',
    LabeledStatement: 'Labeled statement',
    LogicalExpression: 'Logical expression (||, &&)',
    MemberExpression: 'Member expression',
    MetaProperty: 'Meta property',
    MethodDefinition: 'Method definition',
    ModuleSpecifier: 'Module specifier',
    NewExpression: 'Instance initialization',
    ObjectExpression: 'Object expression',
    ObjectPattern: 'Object pattern',
    Program: 'Program',
    Property: 'Property',
    RestElement: 'Rest element',
    ReturnStatement: 'Return statement',
    SequenceExpression: 'Sequence expression',
    SpreadElement: 'Spead element',
    Super: 'Super expression',
    SwitchStatement: 'Switch statement',
    SwitchCase: 'Switch case',
    TaggedTemplateExpression: 'Targged template expression',
    TemplateElement: 'Template element',
    TemplateLiteral: 'Template literal',
    ThisExpression: 'This expression',
    ThrowStatement: 'Throw statement',
    TryStatement: 'Try statement',
    UnaryExpression: 'Unary expression',
    UpdateExpression: 'Update operator (--, ++)',
    VariableDeclaration: 'Variable declaration',
    VariableDeclarator: 'Variable declarator',
    WhileStatement: 'While loop',
    WithStatement: 'With statement',
    YieldExpression: 'Yield expression',
  },
};
